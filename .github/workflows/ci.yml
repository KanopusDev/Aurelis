name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      python-code: ${{ steps.changes.outputs.python-code }}
      documentation: ${{ steps.changes.outputs.documentation }}
      dependencies: ${{ steps.changes.outputs.dependencies }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            python-code:
              - 'aurelis/**/*.py'
              - 'tests/**/*.py'
              - '*.py'
            documentation:
              - 'docs/**'
              - '*.md'
              - 'mkdocs.yml'
            dependencies:
              - 'pyproject.toml'
              - 'poetry.lock'

  code-quality:
    name: 🎨 Code Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python-code == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 💾 Cache dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-

      - name: 🔍 Install dependencies
        run: |
          poetry install --with dev,test

      - name: 🎨 Check code formatting
        run: |
          poetry run black --check --diff aurelis/ tests/
          poetry run isort --check-only --diff aurelis/ tests/

      - name: 🔍 Run linting
        run: |
          poetry run flake8 aurelis/ tests/ --format=github
          poetry run pylint aurelis/ --output-format=github

      - name: 🔒 Type checking
        run: |
          poetry run mypy aurelis/ --show-error-codes

      - name: 📊 Code complexity analysis
        run: |
          poetry run radon cc aurelis/ --min B
          poetry run radon mi aurelis/ --min B

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python-code == 'true' || needs.changes.outputs.dependencies == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: 🔍 Install dependencies
        run: |
          poetry install --with dev,test

      - name: 🛡️ Security audit
        run: |
          poetry run pip-audit --desc --format=json --output=audit-report.json
          poetry run pip-audit --desc

      - name: 🔐 Bandit security scan
        run: |
          poetry run bandit -r aurelis/ -f json -o bandit-report.json
          poetry run bandit -r aurelis/ --severity-level medium

      - name: 🔍 Safety check
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          poetry run safety check --json --output safety-report.json
          poetry run safety check

      - name: 📤 Upload security artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            audit-report.json
            bandit-report.json
            safety-report.json

  test-matrix:
    name: 🧪 Test Matrix
    runs-on: ${{ matrix.os }}
    needs: changes
    if: needs.changes.outputs.python-code == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: 💾 Cache dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: 🔍 Install dependencies
        run: |
          poetry install --with test

      - name: 🧪 Run unit tests
        run: |
          poetry run pytest tests/unit/ \
            --cov=aurelis \
            --cov-report=xml \
            --cov-report=term \
            --junitxml=junit-${{ matrix.os }}-${{ matrix.python-version }}.xml \
            -v

      - name: 🔗 Run integration tests
        if: matrix.python-version == '3.11'
        run: |
          poetry run pytest tests/integration/ \
            --junitxml=integration-${{ matrix.os }}.xml \
            -v

      - name: 📊 Upload coverage
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            junit-*.xml
            integration-*.xml

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python-code == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: 🔍 Install dependencies
        run: |
          poetry install --with test,benchmark

      - name: ⚡ Run performance benchmarks
        run: |
          poetry run pytest tests/performance/ \
            --benchmark-only \
            --benchmark-json=benchmark-results.json \
            -v

      - name: 📊 Performance regression check
        run: |
          poetry run pytest-benchmark compare benchmark-results.json \
            --compare-fail=mean:10% || echo "Performance regression detected"

      - name: 📤 Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json

  documentation-check:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.documentation == 'true' || needs.changes.outputs.python-code == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: 🔍 Install dependencies
        run: |
          poetry install --with docs

      - name: 🔗 Check documentation links
        run: |
          poetry run markdown-link-check docs/**/*.md --config .github/mlc_config.json

      - name: 📚 Build documentation
        run: |
          poetry run mkdocs build --strict

      - name: 🔍 Check API documentation coverage
        run: |
          poetry run pydocstyle aurelis/ --count

      - name: 📤 Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: site/

  build-check:
    name: 📦 Build Check
    runs-on: ubuntu-latest
    needs: [code-quality, security-audit, test-matrix]
    if: always() && (needs.code-quality.result == 'success' || needs.code-quality.result == 'skipped')
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: 🏗️ Build package
        run: |
          poetry build

      - name: 🔍 Verify package
        run: |
          pip install twine
          twine check dist/*

      - name: 🧪 Test installation
        run: |
          pip install dist/*.whl
          python -c "import aurelis; print(f'Aurelis v{aurelis.__version__} imported successfully')"

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  ci-summary:
    name: 📊 CI Summary
    runs-on: ubuntu-latest
    needs: [changes, code-quality, security-audit, test-matrix, performance-tests, documentation-check, build-check]
    if: always()
    steps:
      - name: 📊 Generate CI summary
        run: |
          echo "## 🔄 Aurelis CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Matrix | ${{ needs.test-matrix.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.documentation-check.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Check | ${{ needs.build-check.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY

      - name: ✅ All checks passed
        if: |
          needs.code-quality.result == 'success' &&
          needs.security-audit.result == 'success' &&
          needs.test-matrix.result == 'success' &&
          needs.build-check.result == 'success'
        run: |
          echo "🎉 All CI checks passed! Ready for deployment."

      - name: ❌ Some checks failed
        if: |
          needs.code-quality.result == 'failure' ||
          needs.security-audit.result == 'failure' ||
          needs.test-matrix.result == 'failure' ||
          needs.build-check.result == 'failure'
        run: |
          echo "❌ Some CI checks failed. Please review the results."
          exit 1
