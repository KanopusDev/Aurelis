name: 🛡️ Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "latest"

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-review:
    name: 🔍 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate

  codeql-analysis:
    name: 🔬 CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔬 Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  security-audit:
    name: 🛡️ Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1.3.4
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: 🔍 Install dependencies
        run: |
          poetry install --with dev,test

      - name: 🔐 Run Bandit security linter
        run: |
          poetry run bandit -r aurelis/ \
            -f json -o bandit-report.json \
            --severity-level medium

      - name: 🛡️ Run pip-audit
        run: |
          poetry run pip-audit \
            --desc \
            --format=json \
            --output=pip-audit-report.json

      - name: 🔍 Run safety check
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          poetry run safety check \
            --json \
            --output safety-report.json

      - name: 🔐 Run semgrep security scan
        run: |
          pip install semgrep
          semgrep --config=auto aurelis/ \
            --json \
            --output=semgrep-report.json

      - name: 📊 Security summary
        if: always()
        run: |
          echo "## 🛡️ Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f bandit-report.json ]; then
            BANDIT_ISSUES=$(jq '.results | length' bandit-report.json)
            echo "**Bandit Issues:** $BANDIT_ISSUES" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f pip-audit-report.json ]; then
            PIP_AUDIT_VULNS=$(jq '.vulnerabilities | length' pip-audit-report.json 2>/dev/null || echo "0")
            echo "**Pip-audit Vulnerabilities:** $PIP_AUDIT_VULNS" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f safety-report.json ]; then
            SAFETY_VULNS=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo "0")
            echo "**Safety Vulnerabilities:** $SAFETY_VULNS" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📤 Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            pip-audit-report.json
            safety-report.json
            semgrep-report.json

  secrets-scan:
    name: 🔐 Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  license-check:
    name: 📄 License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1.3.4
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: 🔍 Install dependencies
        run: |
          poetry install --with dev

      - name: 📄 Check licenses
        run: |
          poetry run pip-licenses \
            --format=json \
            --output-file=licenses-report.json
          
          # Check for GPL and other copyleft licenses
          poetry run pip-licenses \
            --fail-on="GPL;AGPL;LGPL" \
            --allow-only="MIT;Apache;BSD;ISC;MPL-2.0;Apache-2.0;BSD-3-Clause;BSD-2-Clause"

      - name: 📊 License summary
        run: |
          echo "## 📄 License Compliance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 License Distribution" >> $GITHUB_STEP_SUMMARY
          poetry run pip-licenses --summary >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses-report.json

  vulnerability-scan:
    name: 🔍 Container Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Build Docker image
        run: |
          docker build -t aurelis:security-scan .

      - name: 🔍 Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'aurelis:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-review, codeql-analysis, security-audit, secrets-scan, license-check]
    if: always()
    steps:
      - name: 📊 Generate security summary
        run: |
          echo "## 🛡️ Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Security Checks" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Review | ${{ needs.dependency-review.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Scan | ${{ needs.secrets-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: ✅ Security checks passed
        if: |
          needs.codeql-analysis.result == 'success' &&
          needs.security-audit.result == 'success' &&
          needs.secrets-scan.result == 'success' &&
          needs.license-check.result == 'success'
        run: |
          echo "🎉 All security checks passed!"

      - name: ⚠️ Security issues detected
        if: |
          needs.codeql-analysis.result == 'failure' ||
          needs.security-audit.result == 'failure' ||
          needs.secrets-scan.result == 'failure' ||
          needs.license-check.result == 'failure'
        run: |
          echo "⚠️ Security issues detected. Please review the reports."
          echo "🔍 Check the Security tab for detailed findings."
