name: 🚀 Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 🔍 Extract version info
        id: version
        run: |
          VERSION=$(poetry version --short)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [[ $VERSION == *"alpha"* ]] || [[ $VERSION == *"beta"* ]] || [[ $VERSION == *"rc"* ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: 🏷️ Validate version tag
        if: github.event_name == 'release'
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          POETRY_VERSION=${{ steps.version.outputs.version }}
          if [ "$TAG_VERSION" != "$POETRY_VERSION" ]; then
            echo "❌ Tag version ($TAG_VERSION) doesn't match Poetry version ($POETRY_VERSION)"
            exit 1
          fi
          echo "✅ Version validation passed"

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: 🔍 Install dependencies
        run: |
          poetry install --with dev,test

      - name: 🛡️ Run security audit
        run: |
          poetry run pip-audit --desc
          
      - name: 🔐 Run Bandit security scan
        run: |
          poetry run bandit -r aurelis/ -f json -o bandit-report.json
          poetry run bandit -r aurelis/ --severity-level medium

      - name: 📤 Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json

  quality-assurance:
    name: 🧪 Quality Assurance
    runs-on: ubuntu-latest
    needs: validate-release
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: 🔍 Install dependencies
        run: |
          poetry install --with dev,test

      - name: 🎨 Run code formatting check
        run: |
          poetry run black --check aurelis/ tests/
          poetry run isort --check-only aurelis/ tests/

      - name: 🔍 Run linting
        run: |
          poetry run flake8 aurelis/ tests/
          poetry run mypy aurelis/

      - name: 🧪 Run tests with coverage
        run: |
          poetry run pytest tests/ \
            --cov=aurelis \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=80 \
            --junitxml=pytest-report.xml

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 📤 Upload test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports-py${{ matrix.python-version }}
          path: |
            pytest-report.xml
            htmlcov/

  build-package:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    needs: [validate-release, security-scan, quality-assurance]
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: 🔍 Install dependencies
        run: poetry install --only main

      - name: 🏗️ Build package
        run: poetry build

      - name: 🔍 Verify package contents
        run: |
          pip install twine
          twine check dist/*
          
      - name: 📋 List package contents
        run: |
          ls -la dist/
          tar -tzf dist/*.tar.gz | head -20

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-packages
          path: dist/
          retention-days: 30
  publish-testpypi:
    name: 🧪 Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [build-package]
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'testpypi') ||
      (github.event_name == 'release' && needs.validate-release.outputs.is-prerelease == 'true')
    environment:
      name: testpypi
      url: https://test.pypi.org/project/aurelisai
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-packages
          path: dist/

      - name: 🚀 Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true

      - name: ✅ Verify TestPyPI publication
        run: |
          sleep 30  # Wait for package to be available          pip install --index-url https://test.pypi.org/simple/ \
            --extra-index-url https://pypi.org/simple/ \
            aurelisai==${{ needs.validate-release.outputs.version }}
          echo "✅ Package successfully installed from TestPyPI"
  publish-pypi:
    name: 🎯 Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-package, publish-testpypi]
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'pypi') ||
      (github.event_name == 'release' && needs.validate-release.outputs.is-prerelease == 'false')
    environment:
      name: pypi
      url: https://pypi.org/project/aurelisai
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-packages
          path: dist/

      - name: 🎯 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: ✅ Verify PyPI publication
        run: |
          sleep 60  # Wait for package to be available
          pip install aurelisai==${{ needs.validate-release.outputs.version }}
          echo "✅ Package successfully installed from PyPI"

  create-deployment-notification:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi]
    if: always()
    steps:
      - name: 📊 Generate deployment summary
        run: |
          echo "## 🚀 Aurelis Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** PyPI Production" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.publish-pypi.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo 'pip install aurelisai==${{ needs.validate-release.outputs.version }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 🎉 Success notification
        if: needs.publish-pypi.result == 'success'
        run: |
          echo "🎉 Aurelis v${{ needs.validate-release.outputs.version }} successfully published to PyPI!"
          echo "🔗 Available at: https://pypi.org/project/aurelisai/"

      - name: ❌ Failure notification
        if: needs.publish-pypi.result == 'failure'
        run: |
          echo "❌ Failed to publish Aurelis v${{ needs.validate-release.outputs.version }} to PyPI"
          echo "🔍 Check the workflow logs for details"
          exit 1
