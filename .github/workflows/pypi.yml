name: ðŸš€ Upload Python Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        type: choice
        options:
          - test
          - pypi
        default: 'pypi'
        required: true
      version_override:
        description: 'Version override (leave empty to use version from pyproject.toml)'
        type: string
        required: false

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
      BUILD_TYPE: ${{ steps.build_vars.outputs.BUILD_TYPE }}
    env:
      PYTHON_VERSION: "3.10"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set build variables
        id: build_vars
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "TRIGGERED_BY=manual" >> $GITHUB_ENV
            echo "BUILD_TYPE=manual" >> $GITHUB_OUTPUT
          else
            echo "TRIGGERED_BY=release" >> $GITHUB_ENV
            echo "BUILD_TYPE=release" >> $GITHUB_OUTPUT
          fi
          echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 1.6.1
          echo "/home/runner/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Handle version override (manual trigger only)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version_override != '' }}
        run: |
          poetry version ${{ github.event.inputs.version_override }}

      - name: Get version
        id: get_version
        run: |
          VERSION=$(poetry version -s)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root --without dev

      - name: Build release distributions
        run: |
          rm -rf dist/
          poetry build --verbose

      - name: Verify package
        run: |
          VERSION="${{ env.VERSION }}"
          ls -la dist/
          pip install --quiet twine
          twine check dist/* --verbose

          SOURCE_DIST=$(find dist -name "aurelisai-${VERSION}.tar.gz" || echo "")
          WHEEL_DIST=$(find dist -name "aurelisai-${VERSION}*.whl" || echo "")

          if [ -z "$SOURCE_DIST" ]; then
            echo "ERROR: Source distribution not found"
            exit 1
          fi

          if [ -z "$WHEEL_DIST" ]; then
            echo "ERROR: Wheel distribution not found"
            exit 1
          fi

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/
          retention-days: 7
          if-no-files-found: error

      - name: Package build summary
        if: always()
        run: |
          echo "## Package Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "* **Version**: ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Build Timestamp**: ${{ env.TIMESTAMP }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Trigger**: ${{ env.TRIGGERED_BY }}" >> $GITHUB_STEP_SUMMARY
          if [ -d "dist" ]; then
            for file in dist/*; do
              filesize=$(du -h "$file" | cut -f1)
              echo "  - $(basename $file) ($filesize)" >> $GITHUB_STEP_SUMMARY
            done
          fi

  pypi-publish:
    runs-on: ubuntu-latest
    needs: release-build
    permissions:
      id-token: write
    environment:
      name: ${{ github.event.inputs.environment || 'pypi' }}
      url: ${{ github.event.inputs.environment == 'test' && 'https://test.pypi.org/p/aurelisai' || 'https://pypi.org/p/aurelisai' }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Verify artifact contents
        run: |
          VERSION="${{ needs.release-build.outputs.VERSION }}"
          echo "Using version: $VERSION"
          ls -la dist/
          pip install twine
          twine check dist/*
          WHEELS=$(find dist -name "*.whl" | wc -l)
          TARS=$(find dist -name "*.tar.gz" | wc -l)
          if [ "$WHEELS" -eq 0 ] || [ "$TARS" -eq 0 ]; then
            echo "Missing required distribution files"
            exit 1
          fi

      - name: Publish to TestPyPI
        id: publish-test
        if: ${{ github.event.inputs.environment == 'test' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/
          verbose: true
          skip-existing: true

      - name: TestPyPI Published URL
        if: ${{ github.event.inputs.environment == 'test' && steps.publish-test.outcome == 'success' }}
        run: |
          VERSION="${{ needs.release-build.outputs.VERSION }}"
          echo "https://test.pypi.org/project/aurelisai/$VERSION/"
          echo "pip install --index-url https://test.pypi.org/simple/ aurelisai==$VERSION"

      - name: Publish to PyPI
        id: publish-prod
        if: ${{ github.event.inputs.environment != 'test' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true

      - name: PyPI Published URL
        if: ${{ github.event.inputs.environment != 'test' && steps.publish-prod.outcome == 'success' }}
        run: |
          VERSION="${{ needs.release-build.outputs.VERSION }}"
          echo "https://pypi.org/project/aurelisai/$VERSION/"
          echo "pip install aurelisai==$VERSION"

      - name: Send deployment notification
        if: always()
        run: |
          VERSION="${{ needs.release-build.outputs.VERSION }}"
          ENV="${{ github.event.inputs.environment || 'pypi' }}"
          STATUS="${{ job.status }}"
          TIMESTAMP="$(date +'%Y-%m-%d %H:%M:%S')"
          echo "## ðŸ“¦ PyPI Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Status** | $STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | $VERSION |" >> $GITHUB_STEP_SUMMARY
          echo "| **Environment** | $ENV |" >> $GITHUB_STEP_SUMMARY
          echo "| **Package URL** | https://${ENV}.pypi.org/project/aurelisai/$VERSION/ |" >> $GITHUB_STEP_SUMMARY
          echo "| **Trigger** | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Actor** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Timestamp** | $TIMESTAMP |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          if [ "$ENV" == "test" ]; then
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "pip install --index-url https://test.pypi.org/simple/ aurelisai==$VERSION" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "pip install aurelisai==$VERSION" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
